"use strict";
globalThis["webpackHotUpdateexpi"]("main-stories",{

/***/ "./components/main/src/expi.js":
/*!*************************************!*\
  !*** ./components/main/src/expi.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Expi)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}

// import './App.css';
function Expi(param) {
    var explode = param.explode, flipIcon = param.flipIcon, inview = param.inview, setinview = param.setinview, transition = param.transition, distributionQuadrants = param.distributionQuadrants, bits = param.bits, widthCoverage = param.widthCoverage, increment = param.increment, heightCoverage = param.heightCoverage, iconSize = param.iconSize, icons = param.icons;
    //THE STATES
    var _useState = _sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), 2), percentage = _useState[0], setpercentage = _useState[1];
    var _useState1 = _sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), 2), iconsRendered = _useState1[0], seticonsrendered = _useState1[1];
    //THE CONFIGS
    //THE STYLINGS
    var styles = {
        mainContainer: {
            width: '10vw',
            height: '10vw',
            border: '1px solid red',
            position: 'absolute',
            display: 'grid',
            justifyItems: 'center',
            alignItems: 'center'
        },
        icon: {
            position: 'absolute',
            transition: explode ? transition + 's' : '0.2s',
            width: iconSize,
            height: iconSize,
            userSelect: 'none'
        }
    };
    //RENDERING X TIMES
    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {
        if (percentage >= 1 && percentage <= 2) {
            setTimeout(function() {
                setpercentage(function(prevPercentage) {
                    return prevPercentage + increment;
                });
            }, percentage >= 1.1 ? 200 : transition * 1000);
        }
    }, [
        percentage
    ]);
    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {
        if (inview) {
            setpercentage(1);
        } else {
            setpercentage(0);
        }
    }, [
        inview
    ]);
    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {
        var _loop = function(a) {
            //get a random icon
            var randomIndex = Math.floor(Math.random() * (icons.length - 0)) + 0;
            //now randomly decide if have to flip the image
            var flip = Math.random() > 0.5 && flipIcon;
            var othertransformations = '';
            othertransformations += flip ? ' scaleX(-1) ' : '';
            //now lets randomly decide the rotation
            var rotate = Math.asin(Math.random()) * 180 / Math.PI;
            rotate = Math.floor(rotate);
            //get desitny x and y  
            var randomBetween2and10 = Math.floor(Math.random() * (10 - 2)) + 2;
            var windowWidth = window.innerWidth / 2;
            var windowHeight = window.innerHeight / 2;
            //now divide the both dimensions by 2 and get an avg.
            var destinyX = Math.floor(Math.random() * (windowWidth * widthCoverage) - 100) + 100;
            var destinyY = Math.floor(Math.random() * (windowHeight * heightCoverage) - 100) + 100;
            //QUADRANT DISTRIBUTION MATHS
            //change quad
            if (currentQuadLeft <= 0) {
                currentQuad += 1;
                currentQuadLeft = distributionQuadrants[currentQuad - 1];
            }
            //change according to quad
            if (currentQuad === 1) {
                //X positve and Y negative
                destinyX *= flip ? -1 : 1;
                destinyY *= -1;
            } else if (currentQuad === 2) {
                //X negative and Y negative  
                destinyY *= -1;
                destinyX *= flip ? 1 : -1;
            } else if (currentQuad === 3) {
                //X negative Y positive
                destinyX *= flip ? 1 : -1;
            } else if (currentQuad === 4) {
                //X positive Y positive
                destinyX *= flip ? -1 : 1;
            }
            //subtarct points left
            currentQuadLeft -= 1;
            //if too tilted, starighten, otherwise tilten
            var destinyTheta = rotate > 40 ? randomBetween2and10 : -randomBetween2and10;
            //icon source
            var randssrc = icons[randomIndex];
            //all ready to push
            tempicons.push({
                Func: function(param) {
                    var style = param.style;
                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("img", {
                        draggable: "false",
                        className: "icon",
                        style: _object_spread({}, styles.icon, style, {
                            animation: "".concat(flip ? 'torto' : 'torto2', " 20s linear infinite")
                        }),
                        src: randssrc
                    });
                },
                intiailRotate: rotate,
                othertransformations: othertransformations,
                destinyX: destinyX,
                destinyY: destinyY,
                destinyTheta: destinyTheta
            });
        };
        var tempicons = [];
        var currentQuad = 1;
        var currentQuadLeft = distributionQuadrants[0];
        for(var a = 0; a < bits; a++)_loop(a);
        seticonsrendered(tempicons);
    }, []);
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: styles.mainContainer
    }, iconsRendered.map(function(param) {
        var Func = param.Func, destinyTheta = param.destinyTheta, destinyX = param.destinyX, destinyY = param.destinyY, intiailRotate = param.intiailRotate, othertransformations = param.othertransformations;
        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Func, {
            style: {
                opacity: percentage == 0 ? '0' : '100%',
                transform: "".concat(othertransformations, " translate(").concat(destinyX * percentage, "px, ").concat(destinyY * percentage, "px) rotate(").concat((destinyTheta - intiailRotate) * percentage, "deg) ")
            }
        });
    })));
}
Expi.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "Expi"
};


/***/ })

});
//# sourceMappingURL=main-stories.ce102eb033006f6a5a7c.hot-update.js.map