{"version":3,"file":"main-stories.10f769e7328ded74a2b6.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;;AAKA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA5EA;AACA;AACA;AACA;AA0EA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;;AAGA;AAMA","sources":["webpack://expi/./components/main/src/expi.js"],"sourcesContent":["\nimport React, { useState } from 'react';\n// import './App.css';\n\nexport default function Expi({explode, flipIcon, inview, setinview, transition, distributionQuadrants, bits, widthCoverage, increment, heightCoverage, iconSize, icons}) {\n  //THE STATES\n  const [percentage, setpercentage] = useState(0)\n  const [iconsRendered, seticonsrendered] = useState([])\n\n  //THE CONFIGS\n \n\n  //THE STYLINGS\n  let styles = {\n    mainContainer: {\n      width: '10vw',\n      height: '10vw',\n      border: '1px solid red',\n      position: 'absolute',\n      display: 'grid',\n      justifyItems: 'center',\n      alignItems: 'center'\n    },\n\n    icon: {\n      position: 'absolute',\n      transition: explode ? transition+'s' : '0.2s',\n      width: iconSize, height: iconSize,\n      userSelect: 'none'\n\n\n    }\n  }\n\n\n  //RENDERING X TIMES\n\n  React.useEffect(() => {\n    if (percentage >= 1 && percentage <= 2 ) {\n      setTimeout(() => {\n        setpercentage(prevPercentage => prevPercentage + increment);\n      }, percentage >= 1.1 ? 200 : (transition)*1000);\n    }\n  }, [percentage]);\n\n  React.useEffect(()=>{\nif(inview){\n  setpercentage(1)\n}else{\n  setpercentage(0)\n}\n  }, [inview])\n\n\n\n\n  React.useEffect(() => {\n    let tempicons = []\n    let currentQuad = 1;\n    let currentQuadLeft = distributionQuadrants[0]\n    for (let a = 0; a < bits; a++) {\n      //get a random icon\n      let randomIndex = Math.floor(Math.random() * (icons.length - 0)) + 0;\n\n\n      //now randomly decide if have to flip the image\n      let flip = (Math.random()) > 0.5 && flipIcon;\n      let othertransformations = ''\n      othertransformations += flip ? ' scaleX(-1) ' : ''\n\n\n      //now lets randomly decide the rotation\n      let rotate = (Math.asin(Math.random())) * 180 / Math.PI;\n      rotate = Math.floor(rotate)\n\n      //get desitny x and y  \n      let randomBetween2and10 = Math.floor(Math.random() * (10 - 2)) + 2\n      let windowWidth = window.innerWidth/2\n      let windowHeight = window.innerHeight/2\n\n      //now divide the both dimensions by 2 and get an avg.\n      let destinyX = Math.floor(Math.random() * (windowWidth * widthCoverage) - 100) + 100\n      let destinyY = Math.floor(Math.random() * (windowHeight * heightCoverage) - 100) + 100\n\n      //QUADRANT DISTRIBUTION MATHS\n      \n      //change quad\n      if (currentQuadLeft <= 0) {\n        currentQuad += 1\n        currentQuadLeft = distributionQuadrants[currentQuad - 1]\n      }\n\n      //change according to quad\n      if (currentQuad === 1) {\n\n      //X positve and Y negative\n        destinyX *= flip ? -1 : 1\n        destinyY *= -1\n\n      } else if (currentQuad === 2) {\n      //X negative and Y negative  \n        destinyY *= -1\n        destinyX *= flip ? 1 : -1\n\n      } else if (currentQuad === 3) {\n      //X negative Y positive\n        destinyX *= flip ? 1 : -1\n\n      } else if (currentQuad === 4) {\n      //X positive Y positive\n        destinyX *= flip ? -1 : 1\n\n      }\n\n      //subtarct points left\n      currentQuadLeft -= 1\n\n      //if too tilted, starighten, otherwise tilten\n      let destinyTheta = rotate > 40 ? randomBetween2and10 : -randomBetween2and10\n\n      //icon source\n      let randssrc = icons[randomIndex];\n\n      //all ready to push\n      tempicons.push({\n        Func: ({ style }) => { return (<img draggable='false' className='icon' style={{ ...styles.icon, ...style, ...{animation: `${flip ? 'torto' : 'torto2'} 20s linear infinite`} }} src={randssrc} />) },\n        intiailRotate: rotate,\n        othertransformations,\n        destinyX,\n        destinyY,\n        destinyTheta\n\n      })\n    }\n    seticonsrendered(tempicons)\n\n  }, [])\n  return (\n    <>\n      {/* <input max={1} step={0.1} style={{ position: 'absolute', left: '0' }} type='range' value={percentage} onChange={(e) => { setpercentage(e.target.value) }} /> */}\n      <button style={{ position: 'absolute', left: '0' }} onClick={() => (setinview(!inview))}>hello</button>\n      <div style={styles.mainContainer}>\n        {iconsRendered.map(({ Func, destinyTheta, destinyX, destinyY, intiailRotate, othertransformations }) => {\n\n          return (\n            <Func style={{ opacity: percentage == 0 ? '0' : '100%' ,transform: `${othertransformations} translate(${destinyX * percentage}px, ${destinyY * percentage}px) rotate(${(destinyTheta - intiailRotate) * percentage}deg) ` }} />\n          )\n\n        }\n\n        )}\n      </div>\n    </>\n  );\n}\n\n"],"names":[],"sourceRoot":""}